#!/usr/bin/env python
import pika
import time

def callback(ch, method, properties, body):
    """Callback function when a message is received"""
    message = body.decode()
    print(f" [x] Received: {message}")
    
    # Simulate processing time
    time.sleep(0.5)
    
    # Acknowledge message has been processed
    ch.basic_ack(delivery_tag=method.delivery_tag)
    print(f" [x] Done processing: {message}")

def consume_messages():
    # Establish connection to RabbitMQ server
    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
    channel = connection.channel()
    
    # Create queue named "ABC" if it doesn't exist
    channel.queue_declare(queue='ABC')
    
    # Set quality of service to process only one message at a time
    channel.basic_qos(prefetch_count=1)
    
    # Set up callback for when a message is received
    channel.basic_consume(
        queue='ABC',
        on_message_callback=callback
    )
    
    print(' [*] Consumer started. Waiting for messages. Press CTRL+C to exit.')
    
    # Start consuming messages - this will block until the script is interrupted
    channel.start_consuming()

if __name__ == '__main__':
    try:
        consume_messages()
    except KeyboardInterrupt:
        print('Consumer stopped by user.')